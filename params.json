{"name":"Gptfdisk","tagline":"Mirrot of git://git.code.sf.net/p/gptfdisk/code","body":"GPT fdisk (aka gdisk, cgdisk, and sgdisk) and FixParts\r\nby Roderick W. Smith, rodsmith@rodsbooks.com\r\n\r\nIntroduction\r\n------------\r\n\r\nThis package includes the source code for four related disk partitioning\r\nprograms:\r\n\r\n- gdisk -- This program is modeled after Linux fdisk, but it operates on\r\n  GUID Partition Table (GPT) disks rather than the Master Boot Record (MBR)\r\n  disks that fdisk modifies. As such, gdisk is an interactive text-mode\r\n  tool for manipulating partitions, but it does nothing to the contents of\r\n  those partitions (usually filesystems, but sometimes swap space or other\r\n  data).\r\n\r\n- cgdisk -- This program is modeled after Linux cfdisk, but it operates on\r\n  GPT disks rather than the MBR disks that cfdisk modifies. As such, cgdisk\r\n  is a curses-based text-mode tool for manipulating partitions, which is to\r\n  say that it uses an interface that relies on arrow keys and a dynamic\r\n  display rather than the command letters and a scrolling display like\r\n  gdisk uses.\r\n\r\n- sgdisk -- This program is conceptually similar to the Linux sfdisk and\r\n  FreeBSD gpt programs, but its operational details differ. It enables\r\n  manipulation of GPT disks using command-line options, so it's suitable\r\n  for use in scripts or by experts to perform specific tasks that might\r\n  take several commands in gdisk to accomplish.\r\n\r\n- fixparts -- This program, unlike the preceding three, operates on MBR\r\n  disks. It's intended to fix certain problems that can be created by\r\n  various utilities. Specifically, it can fix mis-sized extended partitions\r\n  and primary partitions located in the middle of extended partitions. It\r\n  also enables changing primary vs. logical partition status (within limits\r\n  of what's legal in the MBR scheme) and making a few other minor changes.\r\n  It does NOT support creating new partitions; for that, you should use\r\n  fdisk, parted, or some other tool.\r\n\r\nMore details about the abilities of these tools follows.\r\n\r\nAll four programs rely on the same set of underlying code base; they differ\r\nonly in their control interfaces (defined in gdisk.cc, cgdisk.cc,\r\nsgdisk.cc, and fixparts.cc, respectively) and in which support code they\r\nuse.\r\n\r\nGPT fdisk (gdisk, cgdisk, and sgdisk) Details\r\n---------------------------------------------\r\n\r\nThe gdisk program is intended as a (somewhat) fdisk-workalike program for\r\nGPT-partitioned disks, cgdisk is similarly a workalike for fdisk, and\r\nsgdisk provides most of gdisk's functionality in a more script-friendly\r\nprogram. Although libparted and programs that use it (GNU Parted, gparted,\r\netc.) provide the ability to handle GPT disks, they have certain\r\nlimitations that gdisk overcomes. Specific advantages of gdisk, cgdisk, and\r\nsgdisk include:\r\n\r\n* The ability to convert MBR-partitioned disks in-place to GPT format,\r\n  without losing data\r\n\r\n* The ability to convert BSD disklabels in-place to create GPT\r\n  partitions, without losing data\r\n\r\n* The ability to convert from GPT format to MBR format without data loss\r\n  (gdisk and sgdisk only)\r\n\r\n* More flexible specification of filesystem type code GUIDs, which\r\n  GNU Parted tends to corrupt\r\n\r\n* Clear identification of the number of unallocated sectors on a\r\n  disk\r\n\r\n* A user interface that's familiar to long-time users of Linux\r\n  fdisk and cfdisk (gdisk and cgdisk only)\r\n\r\n* The MBR boot loader code is left alone\r\n\r\n* The ability to create a hybrid MBR, which permits GPT-unaware OSes to\r\n  access up to three GPT partitions on the disk (gdisk and sgdisk only)\r\n\r\nOf course, GPT fdisk isn't without its limitations. Most notably, it lacks\r\nthe filesystem awareness and filesystem-related features of GParted. You\r\ncan't resize a partition's filesystem or create a partition with a\r\nfilesystem already in place with gdisk, for instance. There's no GUI\r\nversion of gdisk.\r\n\r\nThe GPT fdisk package provides three program files: the interactive\r\ntext-mode gdisk, the curses-based interactive cgdisk, and the\r\ncommand-line-driven sgdisk. The first two are intended for use in manually\r\npartitioning disks or changing partitioning details; sgdisk is intended for\r\nuse in scripts to help automate tasks such as disk cloning or preparing\r\nmultiple disks for Linux installation.\r\n\r\nFixParts Details\r\n----------------\r\n\r\nThis program's creation was motivated by cries for help I've seen in online\r\nforums from users who have found their partition tables to be corrupted by\r\nvarious buggy partitioning tools. Although most OSes can handle the\r\nafflicted disks fine, libparted-based tools (GParted, parted, most Linux\r\ninstallers, etc.) tend to flake out when presented with these disks.\r\nTypically, the symptom is a disk that appears to hold no partitions;\r\nhowever, sometimes the libparted tool presents partitions other than those\r\nthat the OS sees.\r\n\r\nI've observed four causes of these symptoms, three of which FixParts can\r\ncorrect:\r\n\r\n* Old GPT data -- If a disk is used as a GPT disk and then re-used as an\r\n  MBR disk, the GPT data may be incompletely erased. This happens if the\r\n  disk is repartitioned with fdisk or the Microsoft Windows installer, for\r\n  instance. (Tools based on libparted correctly remove the old GPT data\r\n  when converting from GPT to MBR format.) FixParts checks for this problem\r\n  when it starts and offers to correct it. If you opt to erase the GPT\r\n  data, this erasure occurs immediately, unlike other changes the program\r\n  makes.\r\n\r\n* Mis-sized extended partitions -- Some tools create an extended partition\r\n  that's too large, typically ending after the last sector of the disk.\r\n  FixParts automatically corrects this problem (if you use the 'w' option\r\n  to save the partition table).\r\n\r\n* Primary partitions inside an extended partition -- Some utilities create\r\n  or move primary partitions to within the range covered by the extended\r\n  partition. FixParts can usually correct this problem by turning the\r\n  primary partition into a logical partition or by changing one or more\r\n  other logical partitions into primaries. Such corrections aren't always\r\n  possible, though, at least not without deleting or resizing other\r\n  partitions.\r\n\r\n* Leftover RAID data -- If a disk is used in a RAID array and then re-used\r\n  as a non-RAID disk, some utilities can become confused and fail to see\r\n  the disk. FixParts can NOT correct this problem. You must destroy the old\r\n  RAID data, or possibly remove the dmraid package from the system, to fix\r\n  this problem.\r\n\r\nWhen run, FixParts presents an fdisk-like interface, enabling you to adjust\r\npartition types (primary, logical, or omitted), change type codes, change\r\nthe bootable flag, and so on. Although you can delete a partition (by\r\nomitting it), you can't create new partitions with the program. If you're\r\nused to partitioning disks, particularly with Linux fdisk, two unusual\r\nfeatures of FixParts require elaboration:\r\n\r\n* No extended partitions -- Internally, FixParts reads the partition table\r\n  and discards data on any extended partition(s) it finds. When you save\r\n  the partition table, the program generates a new extended partition. This\r\n  design means that the program automatically corrects many problems\r\n  related to the extended partition. It also means that you'll see no\r\n  evidence of extended partitions in the FixParts user interface, although\r\n  it keeps track of the requirements and prevents you from creating illegal\r\n  layouts, such as a primary between two logicals.\r\n\r\n* Partition numbering -- In most Linux tools, partitions 1-4 are primaries\r\n  and partitions 5 and up are logicals. Although a legal partition table\r\n  loaded into FixParts will initially conform to this convention, some\r\n  types of damaged table might not, and various changes you make can also\r\n  cause deviations. When FixParts writes the partition table, its numbering\r\n  will be altered to conform to the standard MBR conventions, but you\r\n  should use the explicit labeling of partitions as primary or logical\r\n  rather than the partition numbers to determine a partition's status.\r\n\r\nInstalling\r\n----------\r\n\r\nTo compile GPT fdisk, you must have appropriate development tools\r\ninstalled, most notably the GNU Compiler Collection (GCC) and its g++\r\ncompiler for C++. (Under Windows, Microsoft Visual C++ 2008 can also be\r\nused.) In addition, note these requirements:\r\n\r\n* On Linux, FreeBSD, OS X, and Solaris, libuuid must be installed. This is\r\n  the standard for Linux and OS X, although you may need to install a\r\n  package called uuid-dev or something similar to get the headers. On\r\n  FreeBSD, the e2fsprogs-libuuid port must be installed.\r\n\r\n* The ICU library (http://site.icu-project.org), which provides support for\r\n  Unicode partition names, is recommended on all\r\n  platforms except Windows. This library is normally installed in Linux and\r\n  OS X, but you may need to install the development headers (libicu-dev or\r\n  something similar in Linux; or the libicu36-dev Fink package in OS X). To\r\n  compile without ICU support, you must modify the Makefile: Remove the\r\n  \"-D USE_UTF16\" part from the CXXFLAGS line and remove references to\r\n  -licuio, -licuuc, -licudata, and -licucore (details vary between\r\n  platforms) from the compilation options. Suitable lines are present, but\r\n  commented out, in the Makefile, Makefile.solaris, Makefile.freebsd files.\r\n  Because of problems with ICU under OS X, the Makefile.mac file doesn't\r\n  build against ICU by default.\r\n\r\n* The cgdisk program requires the ncurses library and its development files\r\n  (headers). Most Linux distributions install ncurses by default, but you\r\n  may need to install a package called libncurses5-dev, ncurses-devel, or\r\n  something similar to obtain the header files. These files were installed\r\n  already on my Mac OS X development system; however, they may have been\r\n  installed as dependencies of other programs I've installed. If you're\r\n  having problems installing ncurses, you can compile gdisk and/or sgdisk\r\n  without cgdisk by specifying only the targets you want to compile to\r\n  make.\r\n\r\n* The sgdisk program requires the popt library and its development files\r\n  (headers). Most Linux distributions install popt by default, but you may\r\n  need to install a package called popt-dev, popt-devel, or something\r\n  similar to obtain the header files. Mac OS users can find a version of\r\n  popt for Mac OS from Darwin Ports (http://popt.darwinports.com) or Fink\r\n  (http://www.finkproject.org); however, you'll first need to install\r\n  DarwinPorts or Fink (instructions exist on the relevant projects' pages).\r\n  Alternatively, you can compile gdisk and/or cgdisk alone, without sgdisk;\r\n  gdisk doesn't require popt.\r\n\r\nWhen all the necessary development tools and libraries are installed, you\r\ncan uncompress the package and type \"make\" at the command prompt in the\r\nresulting directory. (You may need to type \"make -f Makefile.mac\" on Mac OS\r\nX, \"make -f Makefile.freebsd\" on FreeBSD, \"make -f Makefile.solaris\" on\r\nSolaris, or \"make -f Makefile.mingw\" to compile using MinGW for Windows.)\r\nYou may also need to add header (include) directories or library\r\ndirectories by setting the CXXFLAGS environment variable or by editing the\r\nMakefile. The result should be program files called gdisk, cgdisk, sgdisk,\r\nand fixparts. Typing \"make gdisk\", \"make cgdisk\", \"make sgdisk\", or \"make\r\nfixparts\" will compile only the requested programs. You can use these\r\nprograms in place or copy the files to a suitable directory, such as\r\n/usr/local/sbin. You can copy the man pages (gdisk.8, cgdisk.8, sgdisk.8,\r\nand fixparts.8) to /usr/local/man/man8 to make them available.\r\n\r\nCaveats\r\n-------\r\n\r\nTHIS SOFTWARE IS BETA SOFTWARE! IF IT WIPES OUT YOUR HARD DISK OR EATS YOUR\r\nCAT, DON'T BLAME ME! To date, I've tested the software on several USB flash\r\ndrives, physical hard disks, and virtual disks in the QEMU and VirtualBox\r\nenvironments. Many others have now used the software on their computers, as\r\nwell. I believe all data-corruption bugs to be squashed, but I know full well\r\nthat the odds of my missing something are high. This is particularly true for\r\nlarge (over-2TiB) drives; my only direct testing with such disks is with\r\nvirtual QEMU and VirtualBox disks. I've received user reports of success with\r\nRAID arrays over 2TiB in size, though.\r\n\r\nMy main development platform is a system running the 64-bit version of\r\nGentoo Linux. I've also tested on several other 32- and 64-bit Linux\r\ndistributions, Intel-based Mac OS X 10.5 and 10.6, 64-bit FreeBSD 7.1, and\r\nWindows 7.\r\n\r\nRedistribution\r\n--------------\r\n\r\nThis program is licensed under terms of the GNU GPL (see the file COPYING).\r\n\r\nAcknowledgements\r\n----------------\r\n\r\nThis code is mostly my own; however, I've used three functions from two\r\nother GPLed programs:\r\n\r\n- The code used to generate CRCs is taken from the efone program by\r\n  Krzysztof Dabrowski and ElysiuM deeZine. (See the crc32.h and\r\n  crc32.cc source code files.)\r\n\r\n- A function to find the disk size is taken from Linux fdisk by A. V. Le\r\n  Blanc. This code has subsequently been heavily modified.\r\n\r\nAdditional code contributors include:\r\n\r\n- Yves Blusseau (1otnwmz02@sneakemail.com)\r\n\r\n- David Hubbard (david.c.hubbard@gmail.com)\r\n\r\n- Justin Maggard (justin.maggard@netgear.com)\r\n\r\n- Dwight Schauer (dschauer@ti.com)\r\n\r\n- Florian Zumbiehl (florz@florz.de)\r\n\r\n- Guillaume Delacour (contributed the gdisk_test.sh script)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}